{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/json": {
      "get": {
        "operationId": "AppController_serveSwaggerJson",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/documentation": {
      "get": {
        "operationId": "AppController_serveApiDocs",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/user/seed": {
      "get": {
        "operationId": "UserCurdController_seed",
        "summary": "Seed user",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/count": {
      "get": {
        "operationId": "UserCurdController_count",
        "summary": "Get user count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ]
      }
    },
    "/api/user/options": {
      "get": {
        "operationId": "UserCurdController_options",
        "summary": "Get user option",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user": {
      "get": {
        "operationId": "UserCurdController_findAll",
        "summary": "Get all users",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ]
      },
      "post": {
        "operationId": "UserCurdController_create",
        "summary": "Create a new user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/{id}": {
      "get": {
        "operationId": "UserCurdController_findById",
        "summary": "Get user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserCurdController_update",
        "summary": "Update user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserCurdController_delete",
        "summary": "Delete user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/verify/{id}": {
      "put": {
        "operationId": "UserGeneralController_verifyUser",
        "summary": "Update user by ID by admin",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/adduser": {
      "post": {
        "operationId": "UserGeneralController_create",
        "summary": "Create a new user by admin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/adduser/{id}": {
      "put": {
        "operationId": "UserGeneralController_update",
        "summary": "Update user by ID by admin",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/mail": {
      "post": {
        "operationId": "MailSenderController_create",
        "summary": "provide smtp creds",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailCredDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail"
        ]
      },
      "get": {
        "operationId": "MailSenderController_get",
        "summary": "check if creds are provided",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail"
        ]
      },
      "delete": {
        "operationId": "MailSenderController_delete",
        "summary": "delete creds",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail"
        ]
      }
    },
    "/api/mail/send": {
      "post": {
        "operationId": "MailSenderController_send",
        "summary": "provide smtp creds",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailCredDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail"
        ]
      }
    },
    "/api/question/count": {
      "get": {
        "operationId": "QuestionCurdController_count",
        "summary": "Get question count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/question/review/all": {
      "get": {
        "operationId": "QuestionCurdController_getAllReviewQuestion",
        "summary": "Get question count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/question": {
      "get": {
        "operationId": "QuestionCurdController_findAll",
        "summary": "Get all questions",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "QuestionCurdController_create",
        "summary": "Create a new question",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/question/{id}": {
      "get": {
        "operationId": "QuestionCurdController_findById",
        "summary": "Get question by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Question ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "QuestionCurdController_update",
        "summary": "Update question by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Question ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "QuestionCurdController_delete",
        "summary": "Delete question by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Question ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/question/bulk": {
      "post": {
        "operationId": "QuestionCurdController_createBulk",
        "summary": "Create question in bulk",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionBulkDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/question/upload": {
      "post": {
        "operationId": "QuestionGeneralController_uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "topic": {
                    "type": "string"
                  },
                  "chapter": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "academicLevel": {
                    "type": "string"
                  },
                  "language": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/question/review/overview": {
      "get": {
        "operationId": "QuestionGeneralController_getSources",
        "summary": "Get question count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/question/generate/questions": {
      "post": {
        "operationId": "QuestionGeneralController_generateQuestion",
        "summary": "Generate Question With AI a new question",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateQuestionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/question"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam/count": {
      "get": {
        "operationId": "ExamCurdController_count",
        "summary": "Get exam count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam/options": {
      "get": {
        "operationId": "ExamCurdController_options",
        "summary": "Get exam options",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam/public": {
      "get": {
        "operationId": "ExamCurdController_findAllPublic",
        "summary": "Get all public exam",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ]
      }
    },
    "/api/exam/public/{id}": {
      "get": {
        "operationId": "ExamCurdController_findByIdPublic",
        "summary": "Get public exam by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Exam ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ]
      }
    },
    "/api/exam/option/{id}": {
      "get": {
        "operationId": "ExamCurdController_findByIdOption",
        "summary": "Get exam set option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Exam ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ]
      }
    },
    "/api/exam": {
      "get": {
        "operationId": "ExamCurdController_findAll",
        "summary": "Get all exams",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ExamCurdController_create",
        "summary": "Create a new exam",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExamDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam/duplicate/create/{id}": {
      "get": {
        "operationId": "ExamCurdController_duplicate",
        "summary": "Duplicate an exam by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "exam ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ]
      }
    },
    "/api/exam/{id}": {
      "get": {
        "operationId": "ExamCurdController_findById",
        "summary": "Get exam by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Exam ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ExamCurdController_update",
        "summary": "Update exam by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Exam ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExamDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ExamCurdController_delete",
        "summary": "Delete exam by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Exam ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam/special-permission/{id}": {
      "get": {
        "operationId": "ExamCurdController_findByIdWithSpecialPermission",
        "summary": "Get exam by ID with special permission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Exam ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam/filter/all": {
      "get": {
        "operationId": "ExamGeneralController_examFilter",
        "summary": "Get filtered exams",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam/preview/{id}": {
      "get": {
        "operationId": "ExamGeneralController_examPreview",
        "summary": "Get exam preview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam/passcode/{id}": {
      "post": {
        "operationId": "ExamGeneralController_checkAccessCode",
        "summary": "check exam pass code",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessCodeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course/count": {
      "get": {
        "operationId": "CourseCrudController_count",
        "summary": "Get exam count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ]
      }
    },
    "/api/course/seed": {
      "get": {
        "operationId": "CourseCrudController_seed",
        "summary": "Seed course",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course/public": {
      "get": {
        "operationId": "CourseCrudController_findAllPublic",
        "summary": "Get all public courses",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ]
      }
    },
    "/api/course/public/{id}": {
      "get": {
        "operationId": "CourseCrudController_findByIdPublic",
        "summary": "Get public course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ]
      }
    },
    "/api/course": {
      "get": {
        "operationId": "CourseCrudController_findAll",
        "summary": "Get all course",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "CourseCrudController_create",
        "summary": "Create a new course",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course/view/{id}": {
      "get": {
        "operationId": "CourseCrudController_findByIdView",
        "summary": "Get course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course/preview/{id}": {
      "get": {
        "operationId": "CourseCrudController_findByIdPreview",
        "summary": "Get course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ]
      }
    },
    "/api/course/duplicate/create/{id}": {
      "get": {
        "operationId": "CourseCrudController_duplicate",
        "summary": "Duplicate a course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course/hidden/{id}": {
      "put": {
        "operationId": "CourseCrudController_updateIsHidden",
        "summary": "Update course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HiddenCourseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course/{id}": {
      "put": {
        "operationId": "CourseCrudController_update",
        "summary": "Update course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CourseCrudController_delete",
        "summary": "Delete course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/book/count": {
      "get": {
        "operationId": "BookCurdController_count",
        "summary": "Get book count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ]
      }
    },
    "/api/book/public": {
      "get": {
        "operationId": "BookCurdController_findAllPublic",
        "summary": "Get all public books",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ]
      }
    },
    "/api/book": {
      "get": {
        "operationId": "BookCurdController_findAll",
        "summary": "Get all books",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "BookCurdController_create",
        "summary": "Create a new book",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/book/duplicate/create/{id}": {
      "get": {
        "operationId": "BookCurdController_duplicate",
        "summary": "Duplicate a book by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "book ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ]
      }
    },
    "/api/book/public/{id}": {
      "get": {
        "operationId": "BookCurdController_findByIdPublic",
        "summary": "Get public book by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Book ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ]
      }
    },
    "/api/book/{id}": {
      "get": {
        "operationId": "BookCurdController_findById",
        "summary": "Get book by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Book ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "BookCurdController_update",
        "summary": "Update book by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Book ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "BookCurdController_delete",
        "summary": "Delete book by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Book ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course-enrolled/count": {
      "get": {
        "operationId": "CourseEnrolledCurdController_count",
        "summary": "Get courseEnrolled count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course-enrolled"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course-enrolled/user": {
      "get": {
        "operationId": "CourseEnrolledCurdController_findAllByUser",
        "summary": "Get all courseEnrolleds by user",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course-enrolled"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course-enrolled": {
      "get": {
        "operationId": "CourseEnrolledCurdController_findAll",
        "summary": "Get all courseEnrolleds",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course-enrolled"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "CourseEnrolledCurdController_create",
        "summary": "Create a new courseEnrolled",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseEnrolledDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/course-enrolled"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course-enrolled/{id}": {
      "get": {
        "operationId": "CourseEnrolledCurdController_findById",
        "summary": "Get courseEnrolled by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "CourseEnrolled ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course-enrolled"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CourseEnrolledCurdController_update",
        "summary": "Update courseEnrolled by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "CourseEnrolled ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseEnrolledDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course-enrolled"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CourseEnrolledCurdController_delete",
        "summary": "Delete courseEnrolled by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "CourseEnrolled ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course-enrolled"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/course-enrolled/done": {
      "patch": {
        "operationId": "CourseEnrolledCurdController_updateMarkAsDone",
        "summary": "Update courseEnrolled done",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkAsDoneDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/course-enrolled"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/book-purchased/count": {
      "get": {
        "operationId": "BookPurchasedCurdController_count",
        "summary": "Get bookPurchased count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book-purchased"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/book-purchased/user": {
      "get": {
        "operationId": "BookPurchasedCurdController_findAllByUser",
        "summary": "Get all book purchased by user",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book-purchased"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/book-purchased": {
      "get": {
        "operationId": "BookPurchasedCurdController_findAll",
        "summary": "Get all bookPurchaseds",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book-purchased"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "BookPurchasedCurdController_create",
        "summary": "Create a new bookPurchased",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookPurchasedDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/book-purchased"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/book-purchased/{id}": {
      "get": {
        "operationId": "BookPurchasedCurdController_findById",
        "summary": "Get bookPurchased by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "BookPurchased ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book-purchased"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "BookPurchasedCurdController_update",
        "summary": "Update bookPurchased by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "BookPurchased ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookPurchasedDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book-purchased"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "BookPurchasedCurdController_delete",
        "summary": "Delete bookPurchased by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "BookPurchased ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/book-purchased"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/count": {
      "get": {
        "operationId": "ExamParticipationCurdController_count",
        "summary": "Get examParticipation count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/status/{status}/{id}": {
      "get": {
        "operationId": "ExamParticipationCurdController_statusCountByExamId",
        "summary": "Get examParticipation by user and ID",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ExamParticipation user and ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/user": {
      "get": {
        "operationId": "ExamParticipationCurdController_findAllByUser",
        "summary": "Get all exam participated by user",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/user/{id}": {
      "get": {
        "operationId": "ExamParticipationCurdController_findByUserId",
        "summary": "Get examParticipation by user and ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ExamParticipation user and ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/admin/{id}": {
      "get": {
        "operationId": "ExamParticipationCurdController_findByIdAdmin",
        "summary": "Get examParticipation by user and ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ExamParticipation user and ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation": {
      "get": {
        "operationId": "ExamParticipationCurdController_findAll",
        "summary": "Get all examParticipations",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ExamParticipationCurdController_create",
        "summary": "Create a new examParticipation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExamParticipationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/{id}": {
      "get": {
        "operationId": "ExamParticipationCurdController_findById",
        "summary": "Get examParticipation by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ExamParticipation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ExamParticipationCurdController_update",
        "summary": "Update examParticipation by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ExamParticipation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExamParticipationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ExamParticipationCurdController_delete",
        "summary": "Delete examParticipation by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ExamParticipation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/finish/{id}": {
      "put": {
        "operationId": "ExamParticipationGeneralController_submitExamParticipation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExamParticipationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/update-result": {
      "put": {
        "operationId": "ExamParticipationGeneralController_updateExamParticipantResult",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExamParticipationResultDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/publish-result/{id}": {
      "put": {
        "operationId": "ExamParticipationGeneralController_publishExamResult",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/publish/{id}": {
      "put": {
        "operationId": "ExamParticipationGeneralController_publishExamParticipantResult",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExamParticipationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/standings/{id}": {
      "get": {
        "operationId": "ExamParticipationGeneralController_getStandings",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/exam-participation/examine/{id}": {
      "get": {
        "operationId": "ExamParticipationGeneralController_getExamine",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/exam-participation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/notification": {
      "post": {
        "operationId": "NotificationGeneralController_create",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/notification"
        ]
      },
      "get": {
        "operationId": "NotificationGeneralController_findAll",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/notification"
        ]
      }
    },
    "/api/notification/count": {
      "get": {
        "operationId": "NotificationGeneralController_count",
        "summary": "Get total notification count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/notification"
        ]
      }
    },
    "/api/notification/{id}/read": {
      "patch": {
        "operationId": "NotificationGeneralController_markAsRead",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/notification"
        ]
      }
    },
    "/api/auth/seed/admin": {
      "post": {
        "operationId": "AuthGeneralController_seedAdmin",
        "summary": "Create an admin account with provided data if correct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create an admin account with provided data if correct"
          }
        },
        "tags": [
          "v1/auth",
          "v1/seed"
        ]
      }
    },
    "/api/auth/local/accesstoken": {
      "get": {
        "operationId": "AuthGeneralController_updateAccessToken",
        "summary": "update access token",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/account/guest": {
      "post": {
        "operationId": "AuthGeneralController_createGuestAccount",
        "summary": "Create an guest account with correct access key",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGuestAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/auth",
          "v1/guest"
        ]
      }
    },
    "/api/auth/local/user": {
      "get": {
        "operationId": "AuthGeneralController_getUser",
        "summary": "Get Logged in user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get Logged in user"
          }
        },
        "tags": [
          "v1/auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/local/optional-user": {
      "get": {
        "operationId": "AuthGeneralController_getOptionalUser",
        "summary": "Get Logged in user optional",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get Logged in user optional"
          }
        },
        "tags": [
          "v1/auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/local/check-email": {
      "post": {
        "operationId": "AuthGeneralController_isExistingUser",
        "summary": "Check email exist in database",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailAuthDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Is existing user"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/local/update": {
      "post": {
        "operationId": "AuthGeneralController_updateUser",
        "summary": "Update an account with provided data if correct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create an account with provided data if correct"
          }
        },
        "tags": [
          "v1/auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/local/register": {
      "post": {
        "operationId": "AuthGeneralController_register",
        "summary": "Create an account with provided data if correct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create an account with provided data if correct"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/local/login": {
      "post": {
        "operationId": "AuthGeneralController_login",
        "summary": "Logs in user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginAuthDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logs in user"
          }
        },
        "tags": [
          "v1/auth",
          "v1/login"
        ]
      }
    },
    "/api/auth/local/refresh-token": {
      "post": {
        "operationId": "AuthGeneralController_refreshToken",
        "summary": "Refersh token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "token": "token"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refresh user token"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/local/forgot-password": {
      "post": {
        "operationId": "AuthGeneralController_forgetPassword",
        "summary": "Sent forget-password otp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailAuthDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sent forget-password otp"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/local/receive-otp": {
      "post": {
        "operationId": "AuthGeneralController_receiveOtp",
        "summary": "Verify otp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailAuthDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verify otp"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/local/otp-newpassword": {
      "post": {
        "operationId": "AuthGeneralController_setNewPassword",
        "summary": "Set new password with otp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordOtpAuthDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Set new password with otp"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/local/isloggedin": {
      "get": {
        "operationId": "AuthGeneralController_isloggedin",
        "summary": "Check User Login",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Check User Login"
          }
        },
        "tags": [
          "v1/auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/local/logout": {
      "get": {
        "operationId": "AuthGeneralController_logout",
        "summary": "Logs out user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logs out user"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/google/login": {
      "get": {
        "operationId": "AuthGeneralController_googleLogin",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Google login url"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/google/callback": {
      "get": {
        "operationId": "AuthGeneralController_googleLoginCallback",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Google callback url"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/facebook/login": {
      "get": {
        "operationId": "AuthGeneralController_facebookLogin",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Facebook login url"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/facebook/callback": {
      "get": {
        "operationId": "AuthGeneralController_facebookLoginCallback",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Facebook callback url"
          }
        },
        "tags": [
          "v1/auth"
        ]
      }
    },
    "/api/auth/local/role": {
      "get": {
        "operationId": "AuthGeneralController_getRoles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get user role"
          }
        },
        "tags": [
          "v1/auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/academic-level/count": {
      "get": {
        "operationId": "AcademicLevelCurdController_count",
        "summary": "Get academicLevel count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/academic-level"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/academic-level/seed": {
      "get": {
        "operationId": "AcademicLevelCurdController_seed",
        "summary": "AcademicLevel seed",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/academic-level"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/academic-level/options": {
      "get": {
        "operationId": "AcademicLevelCurdController_options",
        "summary": "Get academicLevel options",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/academic-level"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/academic-level": {
      "get": {
        "operationId": "AcademicLevelCurdController_findAll",
        "summary": "Get all academicLevels",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/academic-level"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AcademicLevelCurdController_create",
        "summary": "Create a new academicLevel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAcademicLevelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/academic-level"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/academic-level/{id}": {
      "get": {
        "operationId": "AcademicLevelCurdController_findById",
        "summary": "Get academicLevel by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "AcademicLevel ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/academic-level"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "AcademicLevelCurdController_update",
        "summary": "Update academicLevel by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "AcademicLevel ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAcademicLevelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/academic-level"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AcademicLevelCurdController_delete",
        "summary": "Delete academicLevel by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "AcademicLevel ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/academic-level"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/subject/count": {
      "get": {
        "operationId": "SubjectCurdController_count",
        "summary": "Get subject count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/subject"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/subject/options": {
      "get": {
        "operationId": "SubjectCurdController_options",
        "summary": "Get subject options",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/subject"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/subject": {
      "get": {
        "operationId": "SubjectCurdController_findAll",
        "summary": "Get all subjects",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/subject"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "SubjectCurdController_create",
        "summary": "Create a new subject",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/subject"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/subject/{id}": {
      "get": {
        "operationId": "SubjectCurdController_findById",
        "summary": "Get subject by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/subject"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "SubjectCurdController_update",
        "summary": "Update subject by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/subject"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SubjectCurdController_delete",
        "summary": "Delete subject by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/subject"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/chapter/count": {
      "get": {
        "operationId": "ChapterCurdController_count",
        "summary": "Get chapter count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/chapter"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/chapter/options": {
      "get": {
        "operationId": "ChapterCurdController_allOptions",
        "summary": "Get chapter options",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/chapter"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/chapter/options/{sid}": {
      "get": {
        "operationId": "ChapterCurdController_options",
        "summary": "Get chapter options",
        "parameters": [
          {
            "name": "sid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/chapter"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/chapter": {
      "get": {
        "operationId": "ChapterCurdController_findAll",
        "summary": "Get all chapters",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/chapter"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ChapterCurdController_create",
        "summary": "Create a new chapter",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChapterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/chapter"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/chapter/{id}": {
      "get": {
        "operationId": "ChapterCurdController_findById",
        "summary": "Get chapter by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Chapter ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/chapter"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ChapterCurdController_update",
        "summary": "Update chapter by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Chapter ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChapterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/chapter"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ChapterCurdController_delete",
        "summary": "Delete chapter by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Chapter ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/chapter"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/topic/count": {
      "get": {
        "operationId": "TopicCurdController_count",
        "summary": "Get topic count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/topic"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/topic/options": {
      "get": {
        "operationId": "TopicCurdController_allOptions",
        "summary": "Get topic options",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/topic"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/topic/options/{cid}": {
      "get": {
        "operationId": "TopicCurdController_options",
        "summary": "Get topic options",
        "parameters": [
          {
            "name": "cid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/topic"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/topic": {
      "get": {
        "operationId": "TopicCurdController_findAll",
        "summary": "Get all topics",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/topic"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "TopicCurdController_create",
        "summary": "Create a new topic",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/topic"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/topic/{id}": {
      "get": {
        "operationId": "TopicCurdController_findById",
        "summary": "Get topic by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/topic"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "TopicCurdController_update",
        "summary": "Update topic by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTopicDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/topic"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "TopicCurdController_delete",
        "summary": "Delete topic by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/topic"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum/count": {
      "get": {
        "operationId": "ForumCurdController_count",
        "summary": "Get forum count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum": {
      "get": {
        "operationId": "ForumCurdController_findAll",
        "summary": "Get all forums",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ForumCurdController_create",
        "summary": "Create a new forum",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateForumDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum/{id}": {
      "get": {
        "operationId": "ForumCurdController_findById",
        "summary": "Get forum by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Forum ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ForumCurdController_update",
        "summary": "Update forum by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Forum ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateForumDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ForumCurdController_delete",
        "summary": "Delete forum by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Forum ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-thread/count": {
      "get": {
        "operationId": "ForumThreadCurdController_count",
        "summary": "Get forumThread count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-thread"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-thread/public": {
      "get": {
        "operationId": "ForumThreadCurdController_findAllPublic",
        "summary": "Get all forumThreads",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-thread"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-thread": {
      "get": {
        "operationId": "ForumThreadCurdController_findAll",
        "summary": "Get all forumThreads",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-thread"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ForumThreadCurdController_create",
        "summary": "Create a new forumThread",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateForumThreadDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-thread"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-thread/{id}": {
      "get": {
        "operationId": "ForumThreadCurdController_findById",
        "summary": "Get forumThread by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumThread ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-thread"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ForumThreadCurdController_update",
        "summary": "Update forumThread by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumThread ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateForumThreadDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-thread"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ForumThreadCurdController_delete",
        "summary": "Delete forumThread by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumThread ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-thread"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-thread/view/{id}": {
      "patch": {
        "operationId": "ForumThreadCurdController_updateViewCount",
        "summary": "Update forumThread by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumThread ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-thread"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-post/count": {
      "get": {
        "operationId": "ForumPostCurdController_count",
        "summary": "Get forumPost count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-post/thread/{id}": {
      "get": {
        "operationId": "ForumPostCurdController_findAllByThreadId",
        "summary": "Get all forumPosts",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumPost ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ForumPostCurdController_updateThreadPost",
        "summary": "Update forumPost by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumPost ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateForumThreadPostDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-post": {
      "get": {
        "operationId": "ForumPostCurdController_findAll",
        "summary": "Get all forumPosts",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ForumPostCurdController_create",
        "summary": "Create a new forumPost",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateForumPostDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-post/{id}": {
      "get": {
        "operationId": "ForumPostCurdController_findById",
        "summary": "Get forumPost by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumPost ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ForumPostCurdController_update",
        "summary": "Update forumPost by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumPost ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateForumPostDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ForumPostCurdController_delete",
        "summary": "Delete forumPost by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumPost ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-post/thread": {
      "post": {
        "operationId": "ForumPostCurdController_createThreadPost",
        "summary": "Create a new forumPost",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateForumThreadPostDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/forum-post/vote/{id}": {
      "patch": {
        "operationId": "ForumPostCurdController_updateAddVote",
        "summary": "Update forumPost by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ForumPost ID",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForumPostVoteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The number of upvotes and downvotes after voting",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "upVoteCount": 10,
                    "downVoteCount": 2
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid MongoDB ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Validation failed (MongoId is expected)",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "ForumPost not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "ForumPost not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/cart/count": {
      "get": {
        "operationId": "CartCurdController_count",
        "summary": "Get cart count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/cart/customer": {
      "get": {
        "operationId": "CartCurdController_findAllByUser",
        "summary": "Get all user cart item",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/cart": {
      "get": {
        "operationId": "CartCurdController_findAll",
        "summary": "Get all carts",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "CartCurdController_create",
        "summary": "Create a new cart",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "CartCurdController_update",
        "summary": "Update cart",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/cart/{id}": {
      "get": {
        "operationId": "CartCurdController_findById",
        "summary": "Get cart by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CartCurdController_delete",
        "summary": "Delete cart by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/cart/item/{cartid}/{itemid}": {
      "put": {
        "operationId": "CartCurdController_updateCartItem",
        "summary": "Update cart item by ID",
        "parameters": [
          {
            "name": "cartid",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CartCurdController_deleteCartItem",
        "summary": "Delete cart item by ID",
        "parameters": [
          {
            "name": "itemid",
            "required": true,
            "in": "path",
            "description": "Cart item ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartid",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/setting/delivery-region-option": {
      "get": {
        "operationId": "SettingCurdController_deliveryRegionOption",
        "summary": "Get setting",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/setting"
        ]
      }
    },
    "/api/setting/delivery-region-fee/{region}": {
      "get": {
        "operationId": "SettingCurdController_deliveryRegionFee",
        "summary": "Get setting",
        "parameters": [
          {
            "name": "region",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/setting"
        ]
      }
    },
    "/api/setting": {
      "get": {
        "operationId": "SettingCurdController_findById",
        "summary": "Get setting",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/setting"
        ]
      },
      "patch": {
        "operationId": "SettingCurdController_update",
        "summary": "Update setting",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/setting"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment-method/count": {
      "get": {
        "operationId": "PaymentMethodCurdController_count",
        "summary": "Get paymentMethod count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/payment-method"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment-method": {
      "get": {
        "operationId": "PaymentMethodCurdController_findAll",
        "summary": "Get all paymentMethods",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/payment-method"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "PaymentMethodCurdController_create",
        "summary": "Create a new paymentMethod",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentMethodDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/payment-method"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payment-method/{id}": {
      "get": {
        "operationId": "PaymentMethodCurdController_findById",
        "summary": "Get paymentMethod by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "PaymentMethod ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/payment-method"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "PaymentMethodCurdController_update",
        "summary": "Update paymentMethod by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "PaymentMethod ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/payment-method"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "PaymentMethodCurdController_delete",
        "summary": "Delete paymentMethod by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "PaymentMethod ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/payment-method"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/count": {
      "get": {
        "operationId": "OrderCurdController_count",
        "summary": "Get order count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/user": {
      "get": {
        "operationId": "OrderCurdController_findAllByUser",
        "summary": "Get all orders by user",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/user/{id}": {
      "get": {
        "operationId": "OrderCurdController_findByUserId",
        "summary": "Get user orders by user id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order": {
      "get": {
        "operationId": "OrderCurdController_findAll",
        "summary": "Get all orders",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "OrderCurdController_create",
        "summary": "Create a new order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/{id}": {
      "get": {
        "operationId": "OrderCurdController_findById",
        "summary": "Get order by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "OrderCurdController_update",
        "summary": "Update order by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "OrderCurdController_delete",
        "summary": "Delete order by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/free": {
      "post": {
        "operationId": "OrderCurdController_createFreeOredr",
        "summary": "Create a new order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFreeOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/manual": {
      "post": {
        "operationId": "OrderCurdController_createManualOrder",
        "summary": "Create a new order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/confirm/{id}": {
      "put": {
        "operationId": "OrderCurdController_confirm",
        "summary": "Confirm order by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/confirm/{id}/{itemid}": {
      "put": {
        "operationId": "OrderCurdController_confirmSingleItem",
        "summary": "Confirm order by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemid",
            "required": true,
            "in": "path",
            "description": "Order Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/update-item": {
      "put": {
        "operationId": "OrderCurdController_updateSingleItem",
        "summary": "Confirm order by ID",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderItemStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/status/place/{id}": {
      "put": {
        "operationId": "OrderStatusController_place",
        "summary": "Mark order as Placed by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/status/confirm/{id}": {
      "put": {
        "operationId": "OrderStatusController_confirm",
        "summary": "Mark order as Confirmed by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/status/ship/{id}": {
      "put": {
        "operationId": "OrderStatusController_ship",
        "summary": "Mark order as Shipped by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/status/deliver/{id}": {
      "put": {
        "operationId": "OrderStatusController_deliver",
        "summary": "Mark order as Delivered by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/order/status/cancel/{id}": {
      "put": {
        "operationId": "OrderStatusController_cancel",
        "summary": "Mark order as Cancelled by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/order"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/resource/count": {
      "get": {
        "operationId": "ResourceCurdController_count",
        "summary": "Get resource count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ]
      }
    },
    "/api/resource/public": {
      "get": {
        "operationId": "ResourceCurdController_findAllPublic",
        "summary": "Get all public resources",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ]
      }
    },
    "/api/resource": {
      "get": {
        "operationId": "ResourceCurdController_findAll",
        "summary": "Get all resources",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ]
      },
      "post": {
        "operationId": "ResourceCurdController_create",
        "summary": "Create a new resource",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/resource/duplicate/create/{id}": {
      "get": {
        "operationId": "ResourceCurdController_duplicate",
        "summary": "Duplicate a resource by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "resource ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ]
      }
    },
    "/api/resource/public/{id}": {
      "get": {
        "operationId": "ResourceCurdController_findByIdPublic",
        "summary": "Get public resource by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Resource ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ]
      }
    },
    "/api/resource/{id}": {
      "get": {
        "operationId": "ResourceCurdController_findById",
        "summary": "Get resource by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Resource ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ResourceCurdController_update",
        "summary": "Update resource by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Resource ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ResourceCurdController_delete",
        "summary": "Delete resource by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Resource ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/resource/save": {
      "post": {
        "operationId": "ResourceSaveController_create",
        "summary": "Save to a User",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveResourceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/resource/save/user": {
      "get": {
        "operationId": "ResourceSaveController_findAllByUser",
        "summary": "Get all resources saved to a user",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/analytics/student/dashboard-cards": {
      "get": {
        "operationId": "AnalyticsCurdController_getStudentDashboardCardData",
        "summary": "Get student dashboard cards",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/analytics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/analytics/dashboard-cards": {
      "get": {
        "operationId": "AnalyticsCurdController_getDashboardCardData",
        "summary": "Get admin dashboard cards",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "startDate": "startdate",
                  "endDate": "enddate"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/analytics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/analytics/student-trend": {
      "get": {
        "operationId": "AnalyticsCurdController_getTrendStudents",
        "summary": "Get student trend. Send one of the following values:[1,3,6,12]  ",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "period": 6
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/analytics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/analytics/course-trend": {
      "get": {
        "operationId": "AnalyticsCurdController_getPopularCourse",
        "summary": "Get student trend. Send one of the following values:[1,3,6,12]",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "startDate": "startdate",
                  "endDate": "enddate"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/analytics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/review/count": {
      "get": {
        "operationId": "ReviewCurdController_count",
        "summary": "Get review count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "where": {
                    "course": "mohsinamin953@gmail.com"
                  }
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/review"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/review": {
      "get": {
        "operationId": "ReviewCurdController_findAll",
        "summary": "Get all reviews",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "where": {
                    "course": "mohsinamin953@gmail.com"
                  }
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/review"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ReviewCurdController_create",
        "summary": "Create a new review",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/review"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/review/user/resource/{id}": {
      "get": {
        "operationId": "ReviewCurdController_findUserReviewByResource",
        "summary": "Get all resource reviews",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "resource ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/review"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/review/resource/{id}": {
      "get": {
        "operationId": "ReviewCurdController_findByResourceAll",
        "summary": "Get all course reviews",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Course ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "where": {
                    "course": "mohsinamin953@gmail.com"
                  }
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/review"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/review/{id}": {
      "get": {
        "operationId": "ReviewCurdController_findById",
        "summary": "Get review by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Review ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/review"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ReviewCurdController_update",
        "summary": "Update review by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Review ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/review"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ReviewCurdController_delete",
        "summary": "Delete review by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Review ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/review"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comments/count": {
      "get": {
        "operationId": "CommentsCurdController_count",
        "summary": "Get comments count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comments/parent-comments/{id}": {
      "get": {
        "operationId": "CommentsCurdController_findAllParentCommentByPostId",
        "summary": "Get all commentss",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Content ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comments/reply-comments/{id}": {
      "get": {
        "operationId": "CommentsCurdController_findAllReplyCommentById",
        "summary": "Get all commentss",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Parent comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comments": {
      "get": {
        "operationId": "CommentsCurdController_findAll",
        "summary": "Get all commentss",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "CommentsCurdController_create",
        "summary": "Create a new comments",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comments/{id}": {
      "get": {
        "operationId": "CommentsCurdController_findById",
        "summary": "Get comments by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Comments ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CommentsCurdController_update",
        "summary": "Update comments by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Comments ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommentsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CommentsCurdController_delete",
        "summary": "Delete comments by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Comments ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/comments/vote/{id}": {
      "patch": {
        "operationId": "CommentsCurdController_updateAddVote",
        "summary": "Update comment by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "comment ID",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentVoteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The number of upvotes and downvotes after voting",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "upVoteCount": 10,
                    "downVoteCount": 2
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid MongoDB ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Validation failed (MongoId is expected)",
                    "error": "Bad Request"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "v1/comments",
          "v1/forum-post"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/blog/save": {
      "post": {
        "operationId": "BlogSaveController_save",
        "summary": "Save to a User",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveBlogDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/blog/save/user": {
      "get": {
        "operationId": "BlogSaveController_findAllByUser",
        "summary": "Get all blogs saved to a user",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/blog/extra/tags": {
      "get": {
        "operationId": "BlogExtraController_findAllBlogTags",
        "summary": "Get all blog tags",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ]
      }
    },
    "/api/blog/extra/admin-picks": {
      "get": {
        "operationId": "BlogExtraController_findAdminPicks",
        "summary": "Get all admin picked blogs",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "title": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ]
      }
    },
    "/api/blog/extra/admin-picks/toggle/{id}": {
      "put": {
        "operationId": "BlogExtraController_toggle_admin_picked",
        "summary": "Mark admin picked, or non-picked, by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Blog ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/blog/count": {
      "get": {
        "operationId": "BlogCurdController_count",
        "summary": "Get blog count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "title": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ]
      }
    },
    "/api/blog/public": {
      "get": {
        "operationId": "BlogCurdController_findAllPublic",
        "summary": "Get all public blogs",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "title": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ]
      }
    },
    "/api/blog": {
      "get": {
        "operationId": "BlogCurdController_findAll",
        "summary": "Get all blogs",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "title": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ]
      },
      "post": {
        "operationId": "BlogCurdController_create",
        "summary": "Create a new blog",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlogDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/blog/duplicate/create/{id}": {
      "get": {
        "operationId": "BlogCurdController_duplicate",
        "summary": "Duplicate a blog by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "blog ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ]
      }
    },
    "/api/blog/public/{id}": {
      "get": {
        "operationId": "BlogCurdController_findByIdPublic",
        "summary": "Get public blog by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Blog ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ]
      }
    },
    "/api/blog/title/{slug}": {
      "get": {
        "operationId": "BlogCurdController_findBySlug",
        "summary": "Get public blog by slug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Blog Slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ]
      }
    },
    "/api/blog/{id}": {
      "get": {
        "operationId": "BlogCurdController_findById",
        "summary": "Get blog by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Blog ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "BlogCurdController_update",
        "summary": "Update blog by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Blog ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBlogDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "BlogCurdController_delete",
        "summary": "Delete blog by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Blog ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/blog"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/coupoon/count": {
      "get": {
        "operationId": "CoupoonCurdController_count",
        "summary": "Get coupoon count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/coupoon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/coupoon": {
      "get": {
        "operationId": "CoupoonCurdController_findAll",
        "summary": "Get all coupoons",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/coupoon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "CoupoonCurdController_create",
        "summary": "Create a new coupoon",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCoupoonDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/coupoon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/coupoon/{id}": {
      "get": {
        "operationId": "CoupoonCurdController_findById",
        "summary": "Get coupoon by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Coupoon ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/coupoon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CoupoonCurdController_update",
        "summary": "Update coupoon by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Coupoon ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCoupoonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/coupoon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CoupoonCurdController_delete",
        "summary": "Delete coupoon by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Coupoon ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/coupoon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/coupoon/validate": {
      "post": {
        "operationId": "CoupoonCurdController_validate",
        "summary": "Validate a coupoon",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateCoupoonDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/coupoon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/coupoon/deactivate/{id}": {
      "patch": {
        "operationId": "CoupoonCurdController_deactivate",
        "summary": "Update coupoon by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Coupoon ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/coupoon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/category/count": {
      "get": {
        "operationId": "CategoryCurdController_count",
        "summary": "Get category count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/category"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/category/options": {
      "get": {
        "operationId": "CategoryCurdController_options",
        "summary": "Get category options",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/category"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/category": {
      "get": {
        "operationId": "CategoryCurdController_findAll",
        "summary": "Get all categorys",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/category"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "CategoryCurdController_create",
        "summary": "Create a new category",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/category"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/category/{id}": {
      "get": {
        "operationId": "CategoryCurdController_findById",
        "summary": "Get category by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/category"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CategoryCurdController_update",
        "summary": "Update category by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/category"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CategoryCurdController_delete",
        "summary": "Delete category by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/category"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/engagement/count": {
      "get": {
        "operationId": "EngagementCurdController_count",
        "summary": "Get engagement count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/engagement"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/engagement": {
      "get": {
        "operationId": "EngagementCurdController_findAll",
        "summary": "Get all engagements",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/engagement"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "EngagementCurdController_create",
        "summary": "Create a new engagement",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEngagementDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/engagement"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/engagement/{id}": {
      "get": {
        "operationId": "EngagementCurdController_findById",
        "summary": "Get engagement by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Engagement ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/engagement"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "EngagementCurdController_update",
        "summary": "Update engagement by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Engagement ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEngagementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/engagement"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "EngagementCurdController_delete",
        "summary": "Delete engagement by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Engagement ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/engagement"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/mail-blueprint/public": {
      "get": {
        "operationId": "MailBlueprintCurdController_findAllPublic",
        "summary": "Get all mailBlueprints",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ]
      }
    },
    "/api/mail-blueprint": {
      "get": {
        "operationId": "MailBlueprintCurdController_findAll",
        "summary": "Get all mailBlueprints",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MailBlueprintCurdController_create",
        "summary": "Create a new mailBlueprint",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailBlueprintDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ]
      }
    },
    "/api/mail-blueprint/public/{id}": {
      "get": {
        "operationId": "MailBlueprintCurdController_findByIdPublic",
        "summary": "Get mailBlueprint by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "MailBlueprint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ]
      }
    },
    "/api/mail-blueprint/{id}": {
      "get": {
        "operationId": "MailBlueprintCurdController_findById",
        "summary": "Get mailBlueprint by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "MailBlueprint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "MailBlueprintCurdController_update",
        "summary": "Update mailBlueprint by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "MailBlueprint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMailBlueprintDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ]
      },
      "delete": {
        "operationId": "MailBlueprintCurdController_delete",
        "summary": "Delete mailBlueprint by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "MailBlueprint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/mail-automation/public": {
      "get": {
        "operationId": "MailAutomationCurdController_findAllPublic",
        "summary": "Get all mailAutomations",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint",
          "v1/mail-automation"
        ]
      }
    },
    "/api/mail-automation": {
      "get": {
        "operationId": "MailAutomationCurdController_findAll",
        "summary": "Get all mailAutomations",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint",
          "v1/mail-automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MailAutomationCurdController_create",
        "summary": "Create a new mailAutomation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailAutomationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint",
          "v1/mail-automation"
        ]
      }
    },
    "/api/mail-automation/public/{id}": {
      "get": {
        "operationId": "MailAutomationCurdController_findByIdPublic",
        "summary": "Get mailAutomation by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "MailAutomation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint",
          "v1/mail-automation"
        ]
      }
    },
    "/api/mail-automation/{id}": {
      "get": {
        "operationId": "MailAutomationCurdController_findById",
        "summary": "Get mailAutomation by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "MailAutomation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint",
          "v1/mail-automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "MailAutomationCurdController_update",
        "summary": "Update mailAutomation by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "MailAutomation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMailAutomationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint",
          "v1/mail-automation"
        ]
      },
      "delete": {
        "operationId": "MailAutomationCurdController_delete",
        "summary": "Delete mailAutomation by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "MailAutomation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint",
          "v1/mail-automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/mail-blueprint/add-automation-blueprint": {
      "post": {
        "operationId": "MailBlueprintGeneralController_addMailAutomationWithTemplate",
        "summary": "Add a new blueprint and add it to automation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailBlueprintAutomationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/mail-blueprint/add-automation": {
      "post": {
        "operationId": "MailBlueprintGeneralController_AddMailAutomation",
        "summary": "Get mailBlueprint count",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailAutomationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/mail-blueprint/send-blueprint": {
      "post": {
        "operationId": "MailBlueprintGeneralController_sendBluePrintMail",
        "summary": "Get mailBlueprint count",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMailBlueprintDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/mail-blueprint/placeholders/{resource}": {
      "get": {
        "operationId": "MailBlueprintGeneralController_getPlaceholder",
        "summary": "Get all mailBlueprints",
        "parameters": [
          {
            "name": "resource",
            "required": true,
            "in": "path",
            "description": "MailBlueprint resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/mail-blueprint"
        ]
      }
    },
    "/api/announcements/count": {
      "get": {
        "operationId": "AnnouncementsCurdController_count",
        "summary": "Get announcements count",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/announcements/public": {
      "get": {
        "operationId": "AnnouncementsCurdController_findAllPublic",
        "summary": "Get all announcementss",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ]
      }
    },
    "/api/announcements": {
      "get": {
        "operationId": "AnnouncementsCurdController_findAll",
        "summary": "Get all announcementss",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AnnouncementsCurdController_create",
        "summary": "Create a new announcements",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnouncementsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ]
      }
    },
    "/api/announcements/public/{id}": {
      "get": {
        "operationId": "AnnouncementsCurdController_findByIdPublic",
        "summary": "Get announcements by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Announcements ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ]
      }
    },
    "/api/announcements/{id}": {
      "get": {
        "operationId": "AnnouncementsCurdController_findById",
        "summary": "Get announcements by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Announcements ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AnnouncementsCurdController_update",
        "summary": "Update announcements by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Announcements ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnouncementsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ]
      },
      "delete": {
        "operationId": "AnnouncementsCurdController_delete",
        "summary": "Delete announcements by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Announcements ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/announcements/resource/{resourceType}/{resourceId}": {
      "get": {
        "operationId": "AnnouncementsCurdController_findByResourceWithPagination",
        "summary": "Get announcements by resourceId and resourceType with pagination",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "description": "The ID of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/announcements"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/image/seed": {
      "get": {
        "operationId": "ImagesGeneralController_seed",
        "summary": "Seed image",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/image"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/image/v2/upload": {
      "post": {
        "operationId": "ImagesGeneralController_uploadFileV2",
        "summary": "Upload any file",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/image"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/image/otp/{id}": {
      "get": {
        "operationId": "ImagesGeneralController_getOtp",
        "summary": "Get otp",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "vedio ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/image"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/image": {
      "get": {
        "operationId": "ImagesGeneralController_findAll",
        "summary": "Get all images",
        "parameters": [
          {
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "example": {
                "query": {
                  "select": {
                    "name": true
                  },
                  "where": {
                    "email": "mohsinamin953@gmail.com"
                  },
                  "page": 1,
                  "limit": 10
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/image"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/image/upload": {
      "post": {
        "operationId": "ImagesGeneralController_uploadFileV1",
        "summary": "Upload any file",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/image"
        ]
      }
    },
    "/api/payment/sslcommerz/init": {
      "post": {
        "operationId": "SSLCommerzController_init",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/sslcommerz"
        ]
      }
    },
    "/api/payment/sslcommerz/success/calback": {
      "post": {
        "operationId": "SSLCommerzController_successCallback",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/sslcommerz"
        ]
      }
    },
    "/api/payment/sslcommerz/fail/calback": {
      "post": {
        "operationId": "SSLCommerzController_failCallback",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "v1/sslcommerz"
        ]
      }
    },
    "/api/payment/bkash/callback": {
      "get": {
        "operationId": "PaymentController_bkaskCallback",
        "parameters": [
          {
            "name": "paymentID",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signature",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1/payment"
        ]
      }
    }
  },
  "info": {
    "title": "Boilerplate v1 API",
    "description": "Basic docs for API in version 1",
    "version": "1.0",
    "contact": {
      "name": "Mohsin Ibna Amin",
      "url": "https://factoryze.tech",
      "email": "mohsinamin953@gmail.com"
    }
  },
  "tags": [],
  "servers": [
    {
      "url": ""
    },
    {
      "url": "/api"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          },
          "email": {
            "type": "string",
            "example": "mohsinamin953@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "123456"
          },
          "phone": {
            "type": "string",
            "example": "01534115844"
          },
          "status": {
            "type": "string",
            "example": "active"
          },
          "imageUrl": {
            "type": "string",
            "example": "imageUrl"
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "provider": {
            "type": "string",
            "example": "Google"
          },
          "providerId": {
            "type": "string",
            "example": "local"
          },
          "role": {
            "example": "user",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "phone",
          "status",
          "imageUrl",
          "description",
          "provider",
          "providerId",
          "role"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          },
          "imageUrl": {
            "type": "string",
            "example": "Mohsin"
          },
          "description": {
            "type": "string",
            "example": "Mohsin"
          },
          "phone": {
            "type": "string",
            "example": "Mohsin"
          },
          "password": {
            "type": "string",
            "example": "123456"
          }
        },
        "required": [
          "name",
          "imageUrl",
          "description",
          "phone",
          "password"
        ]
      },
      "VerifyUserDto": {
        "type": "object",
        "properties": {
          "isverified": {
            "type": "boolean",
            "example": "false"
          }
        },
        "required": [
          "isverified"
        ]
      },
      "CreateMailCredDTO": {
        "type": "object",
        "properties": {
          "smtpHost": {
            "type": "string",
            "example": "asd"
          },
          "smtpPort": {
            "type": "string",
            "example": "asd"
          },
          "smtpFrom": {
            "type": "string",
            "example": "asd"
          },
          "smtpUser": {
            "type": "string",
            "example": "asd"
          },
          "smtpPassword": {
            "type": "string",
            "example": "asd"
          }
        },
        "required": [
          "smtpHost",
          "smtpPort",
          "smtpFrom",
          "smtpUser",
          "smtpPassword"
        ]
      },
      "CreateQuestionDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "example": "addition"
          },
          "topic": {
            "type": "string",
            "example": "addition"
          },
          "category": {
            "type": "string",
            "example": "addition"
          },
          "chapter": {
            "type": "string",
            "example": "chapter 1"
          },
          "subject": {
            "type": "string",
            "example": "subject 1"
          },
          "academicLevel": {
            "type": "string",
            "example": "class 10"
          },
          "imageUrl": {
            "type": "string",
            "example": "addition"
          },
          "language": {
            "type": "string",
            "enum": [
              "bn",
              "en"
            ],
            "default": "bn"
          },
          "questionType": {
            "type": "string",
            "enum": [
              "mcq",
              "written"
            ],
            "default": "written"
          },
          "rightAnswer": {
            "type": "string",
            "example": "abc is the right answer"
          },
          "answerExplanation": {
            "type": "string",
            "example": "abc is the right answer"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "0": "option 1"
              },
              {
                "1": "option 2"
              }
            ]
          },
          "correctOption": {
            "type": "number"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              "option 1",
              "option 2"
            ]
          },
          "isReview": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "language",
          "questionType"
        ]
      },
      "CreateQuestionMetaData": {
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "example": "addition"
          },
          "category": {
            "type": "string",
            "example": "addition"
          },
          "chapter": {
            "type": "string",
            "example": "chapter 1"
          },
          "subject": {
            "type": "string",
            "example": "subject 1"
          },
          "academicLevel": {
            "type": "string",
            "example": "class 10"
          },
          "language": {
            "type": "string",
            "enum": [
              "bn",
              "en"
            ],
            "default": "bn"
          }
        },
        "required": [
          "language"
        ]
      },
      "QuestionPayloadDto": {
        "type": "object",
        "properties": {
          "questionType": {
            "type": "string",
            "enum": [
              "mcq",
              "written"
            ],
            "default": "written"
          },
          "rightAnswer": {
            "type": "string",
            "example": "abc is the right answer"
          },
          "answerExplanation": {
            "type": "string",
            "example": "abc is the right answer"
          },
          "question": {
            "type": "string",
            "example": "addition"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "0": "option 1"
              },
              {
                "1": "option 2"
              }
            ]
          },
          "correctOption": {
            "type": "number"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              "option 1",
              "option 2"
            ]
          },
          "isReview": {
            "type": "boolean",
            "example": false
          },
          "imageUrl": {
            "type": "string",
            "example": "addition"
          }
        },
        "required": [
          "questionType"
        ]
      },
      "CreateQuestionBulkDto": {
        "type": "object",
        "properties": {
          "questionMetaData": {
            "$ref": "#/components/schemas/CreateQuestionMetaData"
          },
          "questionContents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionPayloadDto"
            }
          }
        },
        "required": [
          "questionMetaData",
          "questionContents"
        ]
      },
      "UpdateQuestionDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "example": "addition"
          },
          "topic": {
            "type": "string",
            "example": "addition"
          },
          "category": {
            "type": "string",
            "example": "addition"
          },
          "chapter": {
            "type": "string",
            "example": "chapter 1"
          },
          "subject": {
            "type": "string",
            "example": "subject 1"
          },
          "academicLevel": {
            "type": "string",
            "example": "class 10"
          },
          "imageUrl": {
            "type": "string",
            "example": "addition"
          },
          "language": {
            "type": "string",
            "enum": [
              "bn",
              "en"
            ],
            "default": "bn"
          },
          "questionType": {
            "type": "string",
            "enum": [
              "mcq",
              "written"
            ],
            "default": "written"
          },
          "rightAnswer": {
            "type": "string",
            "example": "abc is the right answer"
          },
          "answerExplanation": {
            "type": "string",
            "example": "abc is the right answer"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "0": "option 1"
              },
              {
                "1": "option 2"
              }
            ]
          },
          "correctOption": {
            "type": "number"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              "option 1",
              "option 2"
            ]
          },
          "isReview": {
            "type": "boolean",
            "example": false
          },
          "id": {
            "type": "string",
            "example": "abcdef"
          }
        }
      },
      "GenerateQuestionDto": {
        "type": "object",
        "properties": {
          "questionMetaData": {
            "$ref": "#/components/schemas/CreateQuestionMetaData"
          },
          "stem": {
            "type": "string"
          },
          "questionCount": {
            "type": "number"
          }
        },
        "required": [
          "questionMetaData",
          "stem",
          "questionCount"
        ]
      },
      "CreateExamDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcq",
              "written",
              "mixed"
            ],
            "default": "mcq"
          },
          "openness": {
            "type": "string",
            "enum": [
              "public",
              "private",
              "restricted"
            ],
            "default": "public"
          },
          "name": {
            "type": "string",
            "enum": [
              "public",
              "private",
              "restricted"
            ],
            "default": "public"
          },
          "description": {
            "type": "string",
            "example": "This is a description"
          },
          "duration": {
            "type": "number",
            "example": 60
          },
          "totalMarks": {
            "type": "number",
            "example": 100
          },
          "passingMarks": {
            "type": "number",
            "example": 40
          },
          "examQuestions": {
            "example": [
              {
                "question": "Question ID",
                "marks": 10
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "thumbnail": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "tags": {
            "example": [
              "tag1",
              "tag2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "category": {
            "type": "string",
            "example": "class id"
          },
          "academicLevel": {
            "type": "string",
            "example": "class id"
          },
          "subject": {
            "type": "string",
            "example": "subject id"
          },
          "chapter": {
            "type": "string",
            "example": "chapter id"
          },
          "topic": {
            "type": "string",
            "example": "topic id"
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "participantions": {
            "example": [
              "participantion ID",
              "participantion ID"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resultPublishDate": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "accessCode": {
            "type": "string",
            "example": "access code"
          },
          "canAttepmtMultiple": {
            "type": "boolean",
            "example": false
          },
          "hasStandings": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "type",
          "openness",
          "name",
          "description",
          "duration",
          "totalMarks",
          "passingMarks",
          "examQuestions",
          "thumbnail",
          "tags",
          "category",
          "academicLevel",
          "subject",
          "chapter",
          "topic",
          "startDate",
          "endDate",
          "participantions",
          "resultPublishDate",
          "accessCode",
          "canAttepmtMultiple",
          "hasStandings"
        ]
      },
      "UpdateExamDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcq",
              "written",
              "mixed"
            ],
            "default": "mcq"
          },
          "openness": {
            "type": "string",
            "enum": [
              "public",
              "private",
              "restricted"
            ],
            "default": "public"
          },
          "name": {
            "type": "string",
            "enum": [
              "public",
              "private",
              "restricted"
            ],
            "default": "public"
          },
          "description": {
            "type": "string",
            "example": "This is a description"
          },
          "duration": {
            "type": "number",
            "example": 60
          },
          "totalMarks": {
            "type": "number",
            "example": 100
          },
          "passingMarks": {
            "type": "number",
            "example": 40
          },
          "examQuestions": {
            "example": [
              {
                "question": "Question ID",
                "marks": 10
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "thumbnail": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "tags": {
            "example": [
              "tag1",
              "tag2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "category": {
            "type": "string",
            "example": "class id"
          },
          "academicLevel": {
            "type": "string",
            "example": "class id"
          },
          "subject": {
            "type": "string",
            "example": "subject id"
          },
          "chapter": {
            "type": "string",
            "example": "chapter id"
          },
          "topic": {
            "type": "string",
            "example": "topic id"
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "participantions": {
            "example": [
              "participantion ID",
              "participantion ID"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resultPublishDate": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "accessCode": {
            "type": "string",
            "example": "access code"
          },
          "canAttepmtMultiple": {
            "type": "boolean",
            "example": false
          },
          "hasStandings": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "AccessCodeDto": {
        "type": "object",
        "properties": {
          "accessCode": {
            "type": "string",
            "example": "abc"
          }
        },
        "required": [
          "accessCode"
        ]
      },
      "CourseInstructorDto": {
        "type": "object",
        "properties": {
          "instructor": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "instructor",
          "description"
        ]
      },
      "LinkDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://example.com/resource"
          },
          "title": {
            "type": "string",
            "example": "Resource Title"
          }
        },
        "required": [
          "url",
          "title"
        ]
      },
      "ContentDataDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "video"
          },
          "isPreview": {
            "type": "boolean",
            "example": false
          },
          "exam": {
            "type": "string",
            "example": "1"
          },
          "title": {
            "type": "string",
            "example": "Introduction to Course"
          },
          "description": {
            "type": "string",
            "example": "This video provides an introduction to the course."
          },
          "videoUrl": {
            "type": "string",
            "example": "https://example.com/video.mp4"
          },
          "videoThumbnail": {
            "type": "string",
            "example": "https://example.com/thumbnail.jpg"
          },
          "videoSection": {
            "type": "string",
            "example": "Section 1"
          },
          "videoLength": {
            "type": "number",
            "example": 10
          },
          "videoPlayer": {
            "type": "string",
            "example": "HTML5"
          },
          "videoStorage": {
            "type": "string",
            "example": "HTML5"
          },
          "videoId": {
            "type": "string",
            "example": "HTML5"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkDto"
            }
          },
          "suggestion": {
            "type": "string",
            "example": "Please watch the next video for more details."
          }
        },
        "required": [
          "type",
          "isPreview",
          "exam",
          "title",
          "videoUrl",
          "videoThumbnail",
          "videoSection",
          "videoLength",
          "videoPlayer",
          "videoStorage",
          "videoId",
          "suggestion"
        ]
      },
      "CourseContentDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "video"
          },
          "contentData": {
            "$ref": "#/components/schemas/ContentDataDto"
          }
        },
        "required": [
          "type",
          "contentData"
        ]
      },
      "CourseSectionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "courseContents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseContentDto"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateCourseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "instructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseInstructorDto"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "price": {
            "type": "number"
          },
          "estimatedPrice": {
            "type": "number"
          },
          "thumbnail": {
            "type": "string"
          },
          "tags": {
            "example": [
              "s",
              "sad"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "level": {
            "type": "string"
          },
          "academicLevels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subjects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "demoUrl": {
            "type": "string"
          },
          "benefits": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prerequisites": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeItems": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ratings": {
            "type": "number"
          },
          "durationMinutes": {
            "type": "number"
          },
          "durationHours": {
            "type": "number"
          },
          "lectureCount": {
            "type": "number"
          },
          "examCount": {
            "type": "number",
            "description": "Number of exams in the Course"
          },
          "bookCount": {
            "type": "number",
            "description": "Number of books in the Course"
          },
          "writtenCount": {
            "type": "number",
            "description": "Number of written assignments in the Course"
          },
          "mcqCount": {
            "type": "number",
            "description": "Number of MCQs in the Course"
          },
          "mixedCount": {
            "type": "number",
            "description": "Number of mixed type assignments in the Course"
          },
          "purchased": {
            "type": "number",
            "description": "Number of times the Course has been purchased"
          },
          "courseSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseSectionDto"
            }
          },
          "books": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "description",
          "instructors",
          "categories",
          "price",
          "estimatedPrice",
          "thumbnail",
          "tags",
          "level",
          "academicLevels",
          "subjects",
          "demoUrl",
          "benefits",
          "prerequisites",
          "includeItems",
          "ratings",
          "durationMinutes",
          "durationHours",
          "lectureCount"
        ]
      },
      "HiddenCourseDto": {
        "type": "object",
        "properties": {
          "isHidden": {
            "type": "boolean",
            "example": "false"
          }
        },
        "required": [
          "isHidden"
        ]
      },
      "UpdateCourseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "instructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseInstructorDto"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "price": {
            "type": "number"
          },
          "estimatedPrice": {
            "type": "number"
          },
          "thumbnail": {
            "type": "string"
          },
          "tags": {
            "example": [
              "s",
              "sad"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "level": {
            "type": "string"
          },
          "academicLevels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subjects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "demoUrl": {
            "type": "string"
          },
          "benefits": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prerequisites": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeItems": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ratings": {
            "type": "number"
          },
          "durationMinutes": {
            "type": "number"
          },
          "durationHours": {
            "type": "number"
          },
          "lectureCount": {
            "type": "number"
          },
          "examCount": {
            "type": "number",
            "description": "Number of exams in the Course"
          },
          "bookCount": {
            "type": "number",
            "description": "Number of books in the Course"
          },
          "writtenCount": {
            "type": "number",
            "description": "Number of written assignments in the Course"
          },
          "mcqCount": {
            "type": "number",
            "description": "Number of MCQs in the Course"
          },
          "mixedCount": {
            "type": "number",
            "description": "Number of mixed type assignments in the Course"
          },
          "purchased": {
            "type": "number",
            "description": "Number of times the Course has been purchased"
          },
          "courseSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseSectionDto"
            }
          },
          "books": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BookAuthorDto": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "author",
          "description"
        ]
      },
      "FAQDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          }
        },
        "required": [
          "question",
          "answer"
        ]
      },
      "CreateBookDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "author": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookAuthorDto"
            }
          },
          "price": {
            "type": "number"
          },
          "details": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "demo": {
            "type": "string"
          },
          "fullPdf": {
            "type": "string"
          },
          "faq": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FAQDto"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isHidden": {
            "type": "boolean"
          },
          "isStockAvailable": {
            "type": "boolean"
          },
          "isHardCopyAvailable": {
            "type": "boolean"
          },
          "hardCopyPrice": {
            "type": "number"
          },
          "rating": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "author",
          "price",
          "details",
          "thumbnail",
          "demo",
          "fullPdf",
          "faq",
          "features",
          "isHidden",
          "isStockAvailable",
          "isHardCopyAvailable",
          "hardCopyPrice",
          "rating"
        ]
      },
      "UpdateBookDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "author": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookAuthorDto"
            }
          },
          "price": {
            "type": "number"
          },
          "details": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "demo": {
            "type": "string"
          },
          "fullPdf": {
            "type": "string"
          },
          "faq": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FAQDto"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isHidden": {
            "type": "boolean"
          },
          "isStockAvailable": {
            "type": "boolean"
          },
          "isHardCopyAvailable": {
            "type": "boolean"
          },
          "hardCopyPrice": {
            "type": "number"
          },
          "rating": {
            "type": "number"
          }
        }
      },
      "CreateCourseEnrolledDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "example": "Mohsin"
          }
        },
        "required": [
          "courseId"
        ]
      },
      "MarkAsDoneDto": {
        "type": "object",
        "properties": {
          "courseEnrolledId": {
            "type": "string",
            "example": "Mohsin"
          },
          "courseContentId": {
            "type": "string",
            "example": "Mohsin"
          },
          "contentDataId": {
            "type": "string",
            "example": "Mohsin"
          },
          "sectionIndex": {
            "type": "number",
            "example": 0
          },
          "contentIndex": {
            "type": "number",
            "example": 1
          },
          "isNext": {
            "type": "string",
            "example": 1
          }
        },
        "required": [
          "courseEnrolledId",
          "courseContentId",
          "contentDataId",
          "sectionIndex",
          "contentIndex",
          "isNext"
        ]
      },
      "UpdateCourseEnrolledDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "example": "Mohsin"
          }
        }
      },
      "CreateBookPurchasedDto": {
        "type": "object",
        "properties": {
          "bookId": {
            "type": "string",
            "example": "Mohsin"
          }
        },
        "required": [
          "bookId"
        ]
      },
      "UpdateBookPurchasedDto": {
        "type": "object",
        "properties": {
          "bookId": {
            "type": "string",
            "example": "Mohsin"
          }
        }
      },
      "CreateExamParticipationDto": {
        "type": "object",
        "properties": {
          "exam": {
            "type": "string",
            "example": "Exam ID"
          },
          "participant": {
            "type": "string",
            "example": "Participant ID"
          },
          "accessCode": {
            "type": "string",
            "example": "Access Code"
          },
          "feedback": {
            "type": "string",
            "example": "This is a feedback"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-10-27T04:34:03.783Z"
          },
          "endedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-10-27T04:34:03.783Z"
          },
          "isResultPublished": {
            "type": "boolean",
            "example": true
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "writtenAnswerPDFUrl": {
            "type": "string",
            "example": "PDF URL"
          },
          "writtenAnswerJudgementPDFUrl": {
            "type": "string",
            "example": "PDF URL"
          }
        },
        "required": [
          "exam",
          "participant",
          "accessCode",
          "feedback",
          "startedAt",
          "endedAt",
          "isResultPublished",
          "answers",
          "writtenAnswerPDFUrl",
          "writtenAnswerJudgementPDFUrl"
        ]
      },
      "UpdateExamParticipationDto": {
        "type": "object",
        "properties": {
          "exam": {
            "type": "string",
            "example": "Exam ID"
          },
          "participant": {
            "type": "string",
            "example": "Participant ID"
          },
          "accessCode": {
            "type": "string",
            "example": "Access Code"
          },
          "feedback": {
            "type": "string",
            "example": "This is a feedback"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-10-27T04:34:03.783Z"
          },
          "endedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-10-27T04:34:03.783Z"
          },
          "isResultPublished": {
            "type": "boolean",
            "example": true
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "writtenAnswerPDFUrl": {
            "type": "string",
            "example": "PDF URL"
          },
          "writtenAnswerJudgementPDFUrl": {
            "type": "string",
            "example": "PDF URL"
          }
        }
      },
      "UpdateExamParticipationResultDto": {
        "type": "object",
        "properties": {
          "examParticipationId": {
            "type": "string",
            "example": true
          },
          "answerId": {
            "type": "string",
            "example": true
          },
          "obtainedMarks": {
            "type": "number",
            "example": 20
          },
          "isAttempted": {
            "type": "boolean",
            "example": true
          },
          "isCorrect": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "examParticipationId",
          "answerId",
          "obtainedMarks",
          "isAttempted",
          "isCorrect"
        ]
      },
      "CreateAuthDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          },
          "email": {
            "type": "string",
            "example": "mohsinamin953@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "123456"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "CreateGuestAccountDto": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string",
            "example": "mohsinamin953@gmail.com"
          },
          "key": {
            "type": "string",
            "example": "11ece8be27491e39b6f940c18fa339ce4d2c9dadd94064898035e16ec27e7f76"
          }
        },
        "required": [
          "accountType",
          "key"
        ]
      },
      "EmailAuthDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mohsinamin953@gmail.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "LoginAuthDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mohsinamin953@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "123456"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "VerifyEmailAuthDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mohsinamin953@gmail.com"
          },
          "otp": {
            "type": "string",
            "example": "123456"
          },
          "removeotp": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "email",
          "otp",
          "removeotp"
        ]
      },
      "ChangePasswordOtpAuthDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mohsinamin953@gmail.com"
          },
          "otp": {
            "type": "string",
            "example": "123456"
          },
          "password": {
            "type": "string",
            "example": "123456"
          }
        },
        "required": [
          "email",
          "otp",
          "password"
        ]
      },
      "CreateAcademicLevelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateAcademicLevelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateSubjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          },
          "description": {
            "type": "string",
            "example": "Description of mohsin"
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "UpdateSubjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          },
          "description": {
            "type": "string",
            "example": "Description of mohsin"
          },
          "id": {
            "type": "string",
            "example": "Mohsin"
          }
        }
      },
      "CreateChapterDto": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "example": "5f4a6d8b6b7e6b001f4f9e5d"
          },
          "name": {
            "type": "string",
            "example": "Chapter 1"
          },
          "description": {
            "type": "string",
            "example": "chapter 1 Description"
          }
        },
        "required": [
          "subject",
          "name",
          "description"
        ]
      },
      "UpdateChapterDto": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "example": "5f4a6d8b6b7e6b001f4f9e5d"
          },
          "name": {
            "type": "string",
            "example": "Chapter 1"
          },
          "description": {
            "type": "string",
            "example": "chapter 1 Description"
          }
        }
      },
      "CreateTopicDto": {
        "type": "object",
        "properties": {
          "chapter": {
            "type": "string",
            "example": "5f4a6d8b6b7e6b001f4f9e5d"
          },
          "subject": {
            "type": "string",
            "example": "5f4a6d8b6b7e6b001f4f9e5d"
          },
          "name": {
            "type": "string",
            "example": "topic 1"
          },
          "description": {
            "type": "string",
            "example": "topic 1 Description"
          }
        },
        "required": [
          "chapter",
          "subject",
          "name",
          "description"
        ]
      },
      "UpdateTopicDto": {
        "type": "object",
        "properties": {
          "chapter": {
            "type": "string",
            "example": "5f4a6d8b6b7e6b001f4f9e5d"
          },
          "subject": {
            "type": "string",
            "example": "5f4a6d8b6b7e6b001f4f9e5d"
          },
          "name": {
            "type": "string",
            "example": "topic 1"
          },
          "description": {
            "type": "string",
            "example": "topic 1 Description"
          },
          "id": {
            "type": "string",
            "example": "sajwntkj8hgsn8tu49jrhng"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateForumDto": {
        "type": "object",
        "properties": {
          "tags": {
            "description": "Tags related to the forum post",
            "example": [
              "discussion",
              "general"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visibility": {
            "type": "string",
            "description": "Visibility of the forum post",
            "enum": [
              "public",
              "private"
            ],
            "default": "public"
          },
          "scope": {
            "type": "string",
            "description": "Scope of the forum post",
            "enum": [
              "all",
              "course",
              "book"
            ],
            "default": "all"
          },
          "type": {
            "type": "string",
            "description": "Type of the forum post",
            "enum": [
              "discussion",
              "qna"
            ],
            "default": "discussion"
          },
          "title": {
            "type": "string",
            "description": "Title of the forum post",
            "example": "How to use NestJS?"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the forum post",
            "example": "This forum post discusses the basics of using NestJS"
          }
        },
        "required": [
          "visibility",
          "scope",
          "type",
          "title"
        ]
      },
      "UpdateForumDto": {
        "type": "object",
        "properties": {
          "tags": {
            "description": "Tags related to the forum post",
            "example": [
              "discussion",
              "general"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visibility": {
            "type": "string",
            "description": "Visibility of the forum post",
            "enum": [
              "public",
              "private"
            ],
            "default": "public"
          },
          "scope": {
            "type": "string",
            "description": "Scope of the forum post",
            "enum": [
              "all",
              "course",
              "book"
            ],
            "default": "all"
          },
          "type": {
            "type": "string",
            "description": "Type of the forum post",
            "enum": [
              "discussion",
              "qna"
            ],
            "default": "discussion"
          },
          "title": {
            "type": "string",
            "description": "Title of the forum post",
            "example": "How to use NestJS?"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the forum post",
            "example": "This forum post discusses the basics of using NestJS"
          }
        }
      },
      "CreateForumThreadDto": {
        "type": "object",
        "properties": {
          "forum": {
            "type": "string",
            "description": "The ID of the related forum",
            "example": "64abf1a2bcf86cd799439011"
          },
          "tags": {
            "description": "Tags related to the forum post",
            "example": [
              "discussion",
              "general"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "description": "The title of the forum thread",
            "example": "Best Practices in NestJS"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the forum post",
            "example": "This forum post discusses the basics of using NestJS"
          },
          "openness": {
            "type": "string",
            "description": "The openness of the forum thread",
            "enum": [
              "open",
              "closed"
            ],
            "default": "open"
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the forum thread",
            "enum": [
              "public",
              "private"
            ],
            "default": "public"
          }
        },
        "required": [
          "forum",
          "title",
          "openness",
          "visibility"
        ]
      },
      "UpdateForumThreadDto": {
        "type": "object",
        "properties": {
          "forum": {
            "type": "string",
            "description": "The ID of the related forum",
            "example": "64abf1a2bcf86cd799439011"
          },
          "tags": {
            "description": "Tags related to the forum post",
            "example": [
              "discussion",
              "general"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "description": "The title of the forum thread",
            "example": "Best Practices in NestJS"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the forum post",
            "example": "This forum post discusses the basics of using NestJS"
          },
          "openness": {
            "type": "string",
            "description": "The openness of the forum thread",
            "enum": [
              "open",
              "closed"
            ],
            "default": "open"
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the forum thread",
            "enum": [
              "public",
              "private"
            ],
            "default": "public"
          }
        }
      },
      "CreateForumThreadPostDto": {
        "type": "object",
        "properties": {
          "flag": {
            "type": "string",
            "description": "The flag status of the post",
            "enum": [
              "okay",
              "inappropriate",
              "spam"
            ],
            "default": "okay"
          },
          "content": {
            "type": "string",
            "description": "The content of the forum post",
            "example": "This is a comment on the thread."
          },
          "title": {
            "type": "string",
            "description": "The title of the forum thread",
            "example": "Best Practices in NestJS"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the forum post",
            "example": "This forum post discusses the basics of using NestJS"
          },
          "isReply": {
            "type": "boolean",
            "description": "Indicates whether the post is a reply",
            "default": false
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the forum thread",
            "enum": [
              "public",
              "private"
            ],
            "default": "public"
          },
          "tags": {
            "description": "Tags related to the forum post",
            "example": [
              "discussion",
              "general"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "flag",
          "content",
          "title",
          "isReply",
          "visibility"
        ]
      },
      "CreateForumPostDto": {
        "type": "object",
        "properties": {
          "forumThread": {
            "type": "string",
            "description": "The ID of the related forum thread",
            "example": "64abf1a2bcf86cd799439013"
          },
          "flag": {
            "type": "string",
            "description": "The flag status of the post",
            "enum": [
              "okay",
              "inappropriate",
              "spam"
            ],
            "default": "okay"
          },
          "content": {
            "type": "string",
            "description": "The content of the forum post",
            "example": "This is a comment on the thread."
          },
          "isReply": {
            "type": "boolean",
            "description": "Indicates whether the post is a reply",
            "default": false
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the forum thread",
            "enum": [
              "public",
              "private"
            ],
            "default": "public"
          }
        },
        "required": [
          "forumThread",
          "flag",
          "content",
          "isReply",
          "visibility"
        ]
      },
      "ForumPostVoteDto": {
        "type": "object",
        "properties": {
          "voteType": {
            "type": "string",
            "description": "The visibility of the forum thread",
            "enum": [
              "upvote",
              "downvote"
            ],
            "default": "upvote"
          }
        },
        "required": [
          "voteType"
        ]
      },
      "UpdateForumThreadPostDto": {
        "type": "object",
        "properties": {
          "flag": {
            "type": "string",
            "description": "The flag status of the post",
            "enum": [
              "okay",
              "inappropriate",
              "spam"
            ],
            "default": "okay"
          },
          "content": {
            "type": "string",
            "description": "The content of the forum post",
            "example": "This is a comment on the thread."
          },
          "title": {
            "type": "string",
            "description": "The title of the forum thread",
            "example": "Best Practices in NestJS"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the forum post",
            "example": "This forum post discusses the basics of using NestJS"
          },
          "isReply": {
            "type": "boolean",
            "description": "Indicates whether the post is a reply",
            "default": false
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the forum thread",
            "enum": [
              "public",
              "private"
            ],
            "default": "public"
          },
          "tags": {
            "description": "Tags related to the forum post",
            "example": [
              "discussion",
              "general"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateForumPostDto": {
        "type": "object",
        "properties": {
          "forumThread": {
            "type": "string",
            "description": "The ID of the related forum thread",
            "example": "64abf1a2bcf86cd799439013"
          },
          "flag": {
            "type": "string",
            "description": "The flag status of the post",
            "enum": [
              "okay",
              "inappropriate",
              "spam"
            ],
            "default": "okay"
          },
          "content": {
            "type": "string",
            "description": "The content of the forum post",
            "example": "This is a comment on the thread."
          },
          "isReply": {
            "type": "boolean",
            "description": "Indicates whether the post is a reply",
            "default": false
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the forum thread",
            "enum": [
              "public",
              "private"
            ],
            "default": "public"
          }
        }
      },
      "CreateCartItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the item (course, book, or exam)"
          },
          "quantity": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Quantity of items"
          },
          "item": {
            "type": "string",
            "description": "Array of MongoDB ObjectIDs of items"
          },
          "isHardCopy": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "quantity",
          "item",
          "isHardCopy",
          "name",
          "thumbnail"
        ]
      },
      "CreateCartDto": {
        "type": "object",
        "properties": {
          "totalPrice": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Total price of the cart"
          },
          "deliveryFee": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Total price of the cart"
          },
          "cartItems": {
            "description": "Cart items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCartItemDto"
            }
          }
        },
        "required": [
          "totalPrice",
          "deliveryFee",
          "cartItems"
        ]
      },
      "UpdateCartDto": {
        "type": "object",
        "properties": {
          "totalPrice": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Total price of the cart"
          },
          "deliveryFee": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Total price of the cart"
          },
          "cartItems": {
            "description": "Cart items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCartItemDto"
            }
          }
        }
      },
      "UpdateCartItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the item (course, book, or exam)"
          },
          "quantity": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Quantity of items"
          },
          "item": {
            "type": "string",
            "description": "Array of MongoDB ObjectIDs of items"
          },
          "isHardCopy": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          }
        }
      },
      "UpdateSettingDto": {
        "type": "object",
        "properties": {
          "returnAndRefundPolicy": {
            "type": "string",
            "example": "Return and Refund Policy - Rich Text"
          },
          "privacyPolicy": {
            "type": "string",
            "example": "Privacy Policy - Rich Text"
          },
          "aboutUs": {
            "type": "string",
            "example": "Privacy Policy - Rich Text"
          },
          "termsAndConditions": {
            "type": "string",
            "example": "Terms and Conditions - Rich Text"
          },
          "paymentOption": {
            "type": "string",
            "enum": [
              "online",
              "bkash",
              "manual",
              "free"
            ],
            "default": "manual"
          },
          "freeDeliveryMinimumOrderAmount": {
            "type": "number",
            "example": "Minimum Order Amount to be eligible for free delivery - Number"
          },
          "deliveryCharge": {
            "type": "number",
            "example": "Delivery Charge - Number"
          }
        },
        "required": [
          "returnAndRefundPolicy",
          "privacyPolicy",
          "aboutUs",
          "termsAndConditions",
          "paymentOption",
          "freeDeliveryMinimumOrderAmount",
          "deliveryCharge"
        ]
      },
      "CreatePaymentMethodDto": {
        "type": "object",
        "properties": {
          "paymentMethodName": {
            "type": "string",
            "example": "Mohsin"
          },
          "paymentMethodType": {
            "type": "string",
            "example": "manual"
          },
          "phoneNumber": {
            "type": "string",
            "example": "phoneNumber"
          }
        },
        "required": [
          "paymentMethodName",
          "paymentMethodType",
          "phoneNumber"
        ]
      },
      "UpdatePaymentMethodDto": {
        "type": "object",
        "properties": {
          "paymentMethodName": {
            "type": "string",
            "example": "Mohsin"
          },
          "paymentMethodType": {
            "type": "string",
            "example": "manual"
          },
          "phoneNumber": {
            "type": "string",
            "example": "phoneNumber"
          }
        }
      },
      "CreateFreeOrderDto": {
        "type": "object",
        "properties": {
          "itemName": {
            "type": "string",
            "example": "phoneNumber"
          },
          "itemType": {
            "type": "string",
            "example": "transactionId"
          },
          "itemId": {
            "type": "string",
            "example": "deliveryAddress"
          },
          "thumbnail": {
            "type": "string",
            "example": "deliveryAddress"
          }
        },
        "required": [
          "itemName",
          "itemType",
          "itemId",
          "thumbnail"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": "phoneNumber"
          },
          "transactionId": {
            "type": "string",
            "example": "transactionId"
          },
          "deliveryAddress": {
            "type": "string",
            "example": "deliveryAddress"
          },
          "paymentMethodType": {
            "type": "string",
            "example": "paymentMethodType"
          },
          "paymentMethodName": {
            "type": "string",
            "example": "paymentMethodName"
          }
        },
        "required": [
          "phoneNumber",
          "transactionId",
          "deliveryAddress",
          "paymentMethodType",
          "paymentMethodName"
        ]
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": "phoneNumber"
          },
          "transactionId": {
            "type": "string",
            "example": "transactionId"
          },
          "deliveryAddress": {
            "type": "string",
            "example": "deliveryAddress"
          },
          "paymentMethodType": {
            "type": "string",
            "example": "paymentMethodType"
          },
          "paymentMethodName": {
            "type": "string",
            "example": "paymentMethodName"
          }
        }
      },
      "UpdateOrderItemStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the order item",
            "example": "pending"
          },
          "orderId": {
            "type": "string",
            "description": "The id of the order"
          },
          "orderItemId": {
            "type": "string",
            "description": "The id of the order"
          }
        },
        "required": [
          "status",
          "orderId",
          "orderItemId"
        ]
      },
      "ResourceAuthorDto": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "author",
          "description"
        ]
      },
      "CreateResourceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "author": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceAuthorDto"
            }
          },
          "details": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "fullPdf": {
            "type": "string"
          },
          "isHidden": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "author",
          "details",
          "thumbnail",
          "fullPdf",
          "isHidden"
        ]
      },
      "UpdateResourceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "author": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceAuthorDto"
            }
          },
          "details": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "fullPdf": {
            "type": "string"
          },
          "isHidden": {
            "type": "boolean"
          }
        }
      },
      "SaveResourceDto": {
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "string"
          }
        },
        "required": [
          "resource_id"
        ]
      },
      "CreateReviewDto": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "example": "Mohsin"
          },
          "content": {
            "type": "string",
            "example": "Mohsin"
          },
          "rating": {
            "type": "number",
            "example": 3
          }
        },
        "required": [
          "resource",
          "content",
          "rating"
        ]
      },
      "UpdateReviewDto": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "example": "Mohsin"
          },
          "content": {
            "type": "string",
            "example": "Mohsin"
          },
          "rating": {
            "type": "number",
            "example": 3
          }
        }
      },
      "CreateCommentsDto": {
        "type": "object",
        "properties": {
          "contentId": {
            "type": "string",
            "example": "Mohsin"
          },
          "content": {
            "type": "string",
            "example": "Mohsin"
          },
          "parentId": {
            "type": "string",
            "example": "Mohsin"
          }
        },
        "required": [
          "contentId",
          "content",
          "parentId"
        ]
      },
      "CommentVoteDto": {
        "type": "object",
        "properties": {
          "voteType": {
            "type": "string",
            "description": "Vote type",
            "enum": [
              "upvote",
              "downvote"
            ],
            "default": "upvote"
          }
        },
        "required": [
          "voteType"
        ]
      },
      "UpdateCommentsDto": {
        "type": "object",
        "properties": {
          "contentId": {
            "type": "string",
            "example": "Mohsin"
          },
          "content": {
            "type": "string",
            "example": "Mohsin"
          },
          "parentId": {
            "type": "string",
            "example": "Mohsin"
          }
        }
      },
      "SaveBlogDto": {
        "type": "object",
        "properties": {
          "blogId": {
            "type": "string"
          }
        },
        "required": [
          "blogId"
        ]
      },
      "BlogAuthorDto": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "author",
          "description"
        ]
      },
      "CreateBlogDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string"
          },
          "previewText": {
            "type": "string"
          },
          "author": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogAuthorDto"
            }
          },
          "details": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "readTime": {
            "type": "number"
          },
          "viewCount": {
            "type": "number",
            "default": 0
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isHidden": {
            "type": "boolean"
          }
        },
        "required": [
          "title",
          "subtitle",
          "previewText",
          "author",
          "details",
          "thumbnail",
          "readTime",
          "viewCount",
          "tags",
          "images",
          "isHidden"
        ]
      },
      "UpdateBlogDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string"
          },
          "previewText": {
            "type": "string"
          },
          "author": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogAuthorDto"
            }
          },
          "details": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "readTime": {
            "type": "number"
          },
          "viewCount": {
            "type": "number",
            "default": 0
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isHidden": {
            "type": "boolean"
          }
        }
      },
      "ValidateCoupoonDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Coupon code to be validated",
            "example": "BLACKFRIDAY2024"
          },
          "resourceId": {
            "type": "string",
            "description": "Resource ID to which the coupon applies",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        },
        "required": [
          "code",
          "resourceId"
        ]
      },
      "CreateCoupoonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the coupon",
            "example": "Black Friday Discount"
          },
          "code": {
            "type": "string",
            "description": "Coupon code",
            "example": "BLACKFRIDAY2024"
          },
          "validityType": {
            "type": "string",
            "description": "Coupon validity type",
            "enum": [
              "unlimited",
              "count",
              "duration"
            ],
            "default": "unlimited"
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of coupons",
            "example": 100,
            "default": 0
          },
          "totalUsedCount": {
            "type": "number",
            "description": "Remaining number of coupons",
            "example": 50,
            "default": 0
          },
          "remainingDate": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date of the coupon"
          },
          "discountType": {
            "type": "string",
            "description": "Discount type",
            "enum": [
              "flat",
              "percentage"
            ],
            "default": "flat"
          },
          "flatDiscount": {
            "type": "number",
            "description": "Flat discount amount (required if discountType is FLAT)",
            "example": 50,
            "default": 0
          },
          "percentageDiscount": {
            "type": "number",
            "description": "Percentage discount amount (required if discountType is PERCENTAGE)",
            "example": 10,
            "default": 0
          },
          "resourceIds": {
            "description": "List of resource IDs associated with the coupon",
            "example": [
              "resource1",
              "resource2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isForAllResource": {
            "type": "boolean",
            "description": "Is the coupon valid for all resources",
            "example": true,
            "default": true
          },
          "isSpecificUsers": {
            "type": "boolean",
            "description": "Is the coupon valid for all resources",
            "example": true,
            "default": true
          },
          "isValid": {
            "type": "boolean",
            "description": "Is the coupon valid for all resources",
            "example": true,
            "default": true
          }
        },
        "required": [
          "name",
          "code",
          "validityType",
          "discountType",
          "resourceIds",
          "isForAllResource",
          "isSpecificUsers",
          "isValid"
        ]
      },
      "UpdateCoupoonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the coupon",
            "example": "Black Friday Discount"
          },
          "code": {
            "type": "string",
            "description": "Coupon code",
            "example": "BLACKFRIDAY2024"
          },
          "validityType": {
            "type": "string",
            "description": "Coupon validity type",
            "enum": [
              "unlimited",
              "count",
              "duration"
            ],
            "default": "unlimited"
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of coupons",
            "example": 100,
            "default": 0
          },
          "totalUsedCount": {
            "type": "number",
            "description": "Remaining number of coupons",
            "example": 50,
            "default": 0
          },
          "remainingDate": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date of the coupon"
          },
          "discountType": {
            "type": "string",
            "description": "Discount type",
            "enum": [
              "flat",
              "percentage"
            ],
            "default": "flat"
          },
          "flatDiscount": {
            "type": "number",
            "description": "Flat discount amount (required if discountType is FLAT)",
            "example": 50,
            "default": 0
          },
          "percentageDiscount": {
            "type": "number",
            "description": "Percentage discount amount (required if discountType is PERCENTAGE)",
            "example": 10,
            "default": 0
          },
          "resourceIds": {
            "description": "List of resource IDs associated with the coupon",
            "example": [
              "resource1",
              "resource2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isForAllResource": {
            "type": "boolean",
            "description": "Is the coupon valid for all resources",
            "example": true,
            "default": true
          },
          "isSpecificUsers": {
            "type": "boolean",
            "description": "Is the coupon valid for all resources",
            "example": true,
            "default": true
          },
          "isValid": {
            "type": "boolean",
            "description": "Is the coupon valid for all resources",
            "example": true,
            "default": true
          }
        }
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          },
          "description": {
            "type": "string",
            "example": "Mohsin"
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin"
          },
          "description": {
            "type": "string",
            "example": "Mohsin"
          }
        }
      },
      "CreateEngagementDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL related to the engagement",
            "example": "https://example.com"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of resource",
            "enum": [
              "Course",
              "Exam",
              "Book",
              "Comments",
              "Blog",
              "Resource",
              "Unknown"
            ],
            "example": "Unknown"
          },
          "resourceSlug": {
            "type": "string",
            "description": "The slug of the resource",
            "example": "resource-slug"
          },
          "previousEngagementId": {
            "type": "string",
            "description": "The ID of the previous engagement",
            "example": "60c72b2f9b7e2b8f4b84d9e0"
          },
          "activityName": {
            "type": "string",
            "description": "The name of the activity",
            "example": "Page Visit"
          },
          "activityType": {
            "type": "string",
            "description": "The type of activity",
            "enum": [
              "view",
              "click",
              "scroll",
              "hover",
              "input",
              "change",
              "keydown",
              "keyup",
              "keypress",
              "submit",
              "focus",
              "blur",
              "copy",
              "cut",
              "paste",
              "resize",
              "wheel",
              "touchstart",
              "touchmove",
              "touchend",
              "touchcancel",
              "unknokn"
            ],
            "example": "unknokn"
          }
        },
        "required": [
          "url",
          "resourceType",
          "activityType"
        ]
      },
      "UpdateEngagementDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL related to the engagement",
            "example": "https://example.com"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of resource",
            "enum": [
              "Course",
              "Exam",
              "Book",
              "Comments",
              "Blog",
              "Resource",
              "Unknown"
            ],
            "example": "Unknown"
          },
          "resourceSlug": {
            "type": "string",
            "description": "The slug of the resource",
            "example": "resource-slug"
          },
          "previousEngagementId": {
            "type": "string",
            "description": "The ID of the previous engagement",
            "example": "60c72b2f9b7e2b8f4b84d9e0"
          },
          "activityName": {
            "type": "string",
            "description": "The name of the activity",
            "example": "Page Visit"
          },
          "activityType": {
            "type": "string",
            "description": "The type of activity",
            "enum": [
              "view",
              "click",
              "scroll",
              "hover",
              "input",
              "change",
              "keydown",
              "keyup",
              "keypress",
              "submit",
              "focus",
              "blur",
              "copy",
              "cut",
              "paste",
              "resize",
              "wheel",
              "touchstart",
              "touchmove",
              "touchend",
              "touchcancel",
              "unknokn"
            ],
            "example": "unknokn"
          }
        }
      },
      "CreateMailBlueprintDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Blueprint name"
          },
          "bodyContent": {
            "type": "string",
            "example": "Mohsin {{placeholder}}"
          },
          "subjectContent": {
            "type": "string",
            "example": "Mohsin {{placeholder}}"
          }
        },
        "required": [
          "name",
          "bodyContent",
          "subjectContent"
        ]
      },
      "UpdateMailBlueprintDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Blueprint name"
          },
          "bodyContent": {
            "type": "string",
            "example": "Mohsin {{placeholder}}"
          },
          "subjectContent": {
            "type": "string",
            "example": "Mohsin {{placeholder}}"
          }
        }
      },
      "CreateMailAutomationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin",
            "description": "Name of the mail automation optional"
          },
          "resourceName": {
            "type": "string",
            "enum": [
              "course",
              "enrolled_course",
              "exam",
              "result"
            ],
            "example": "course"
          },
          "bluePrintId": {
            "type": "string",
            "example": "mongo id"
          }
        },
        "required": [
          "resourceName",
          "bluePrintId"
        ]
      },
      "UpdateMailAutomationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mohsin",
            "description": "Name of the mail automation optional"
          },
          "resourceName": {
            "type": "string",
            "enum": [
              "course",
              "enrolled_course",
              "exam",
              "result"
            ],
            "example": "course"
          },
          "bluePrintId": {
            "type": "string",
            "example": "mongo id"
          }
        }
      },
      "CreateMailBlueprintAutomationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Blueprint name"
          },
          "resourceName": {
            "type": "string",
            "enum": [
              "course",
              "enrolled_course",
              "exam",
              "result"
            ],
            "example": "course"
          },
          "bodyContent": {
            "type": "string",
            "example": "Mohsin {{placeholder}}"
          },
          "subjectContent": {
            "type": "string",
            "example": "Mohsin {{placeholder}}"
          }
        },
        "required": [
          "name",
          "resourceName",
          "bodyContent",
          "subjectContent"
        ]
      },
      "SendMailBlueprintDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "mongo id"
          },
          "to": {
            "type": "string",
            "example": "mohsinamin953@gmail.com"
          },
          "cc": {
            "example": [
              "mohsinamin954@gmail.com",
              "mohsinamin952@gmail.com"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "example": [
              "mohsinamin954@gmail.com",
              "mohsinamin952@gmail.com"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "placeData": {
            "type": "object",
            "description": "JSON object with placeholders and their values. can be a nested json",
            "example": {
              "adifferent_placeholder": "Mohsin",
              "placeholderwithspace": "<h1>ExampleCorp</h1>"
            }
          }
        },
        "required": [
          "id",
          "to",
          "placeData"
        ]
      },
      "CreateAnnouncementsDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "example": "Important Update",
            "description": "Content of the announcement"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "Course",
              "Exam",
              "Book",
              "Comments",
              "Blog",
              "Resource",
              "Unknown"
            ],
            "description": "Type of the resource (e.g., Book or Course)",
            "example": "Course"
          },
          "resourceId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85",
            "description": "ID of the resource (e.g., Book or Course)"
          },
          "isMailed": {
            "type": "boolean",
            "example": false,
            "description": "Should be mailed or not",
            "default": false
          }
        },
        "required": [
          "content",
          "resourceType",
          "resourceId",
          "isMailed"
        ]
      },
      "UpdateAnnouncementsDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "example": "Important Update",
            "description": "Content of the announcement"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "Course",
              "Exam",
              "Book",
              "Comments",
              "Blog",
              "Resource",
              "Unknown"
            ],
            "description": "Type of the resource (e.g., Book or Course)",
            "example": "Course"
          },
          "resourceId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85",
            "description": "ID of the resource (e.g., Book or Course)"
          },
          "isMailed": {
            "type": "boolean",
            "example": false,
            "description": "Should be mailed or not",
            "default": false
          }
        }
      }
    }
  }
}